// Prisma schema for NextAuth + MFA (TOTP/WebAuthn) + Push subscriptions

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?

  // MFA fields
  totpEnabled     Boolean  @default(false)
  totpSecret      String?
  totpTempSecret  String?

  // WebAuthn
  webAuthnCredentials WebAuthnCredential[]

  // Push subscriptions
  pushSubscriptions  PushSubscription[]

  accounts Account[]
  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model WebAuthnCredential {
  id                 String   @id @default(cuid())
  userId             String
  credentialId       Bytes    // base64url decoded
  publicKey          Bytes
  counter            Int      @default(0)
  transports         String?  // comma-separated transports
  credentialDeviceType String? // single_device / multi_device
  credentialBackedUp   Boolean? @default(false)
  createdAt          DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialId])
}

model PushSubscription {
  id        String   @id @default(cuid())
  userId    String
  endpoint  String   @unique
  p256dh    String
  auth      String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

